{"version":3,"sources":["../node_modules/@material-ui/icons/Edit.js","../node_modules/@material-ui/icons/MailOutline.js","../node_modules/@material-ui/icons/NotInterested.js","views/_AccountantViews/AccountantTransactionDetails/components/Header/Header.js","views/_AccountantViews/AccountantTransactionDetails/components/Summary/components/CustomerInfo/components/CustomerEdit/CustomerEdit.js","views/_AccountantViews/AccountantTransactionDetails/components/Summary/components/CustomerInfo/CustomerInfo.js","views/_AccountantViews/AccountantTransactionDetails/components/Summary/components/Invoices/Invoices.js","views/_AccountantViews/AccountantTransactionDetails/components/Summary/components/SendEmails/SendEmails.js","views/_AccountantViews/AccountantTransactionDetails/components/Summary/components/OtherActions/OtherActions.js","views/_AccountantViews/AccountantTransactionDetails/components/Summary/Summary.js","views/_AccountantViews/AccountantTransactionDetails/components/Invoices/Invoices.js","views/_AccountantViews/AccountantTransactionDetails/components/Logs/Logs.js","views/_AccountantViews/AccountantTransactionDetails/AccountantTransactionDetails.js"],"names":["_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","exports","value","default","React","_default","createElement","d","useStyles","makeStyles","root","Header","props","className","rest","classes","clsx","Typography","component","gutterBottom","variant","theme","position","top","left","transform","outline","boxShadow","shadows","width","maxHeight","overflowY","maxWidth","container","marginTop","spacing","actions","justifyContent","saveButton","color","palette","white","backgroundColor","colors","green","CustomerEdit","open","onClose","customer","useState","formState","setFormState","handleFieldChange","event","persist","target","name","type","checked","Modal","Card","CardContent","align","Grid","item","xs","TextField","fullWidth","label","onChange","email","CardActions","Button","onClick","displayName","defaultProps","content","padding","flexDirection","alignItems","marginLeft","buttonIcon","marginRight","CustomerInfo","openEdit","setOpenEdit","CardHeader","title","Divider","Table","TableBody","TableRow","selected","TableCell","Date","toUTCString","Math","random","red","orange","grey","sendButton","mailIcon","table","cell","mainActions","display","notice","deleteButton","error","main","dark","Summary","setCustomer","useEffect","mounted","axios","get","then","response","data","summary","lg","md","xl","inner","minWidth","Invoices","invoices","setInvoices","statusColors","pending","paid","rejected","action","TableHead","map","invoice","key","id","split","shift","moment","date","format","description","paymentMethod","currency","status","RouterLink","size","to","methodCell","statusCell","Logs","logs","setLogs","options","suppressScrollY","log","method","route","desc","IP","created_at","tabs","divider","AccountantTransactionDetails","match","history","params","tab","find","t","Tabs","push","scrollButtons","Tab"],"mappings":"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","file":"static/js/17.a4ddee22.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 00-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n}), 'Edit');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 14H4V8l8 5 8-5v10zm-8-7L4 6h16l-8 5z\"\n}), 'MailOutline');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8 0-1.85.63-3.55 1.69-4.9L16.9 18.31C15.55 19.37 13.85 20 12 20zm6.31-3.1L7.1 5.69C8.45 4.63 10.15 4 12 4c4.42 0 8 3.58 8 8 0 1.85-.63 3.55-1.69 4.9z\"\n}), 'NotInterested');\n\nexports.default = _default;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport { Typography } from '@material-ui/core';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst Header = props => {\n  const { className, ...rest } = props;\n\n  const classes = useStyles();\n\n  const customer = {\n    name: 'Ekaterina Tankova'\n  };\n\n  return (\n    <div\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <Typography\n        component=\"h2\"\n        gutterBottom\n        variant=\"overline\"\n      >\n        Customers\n      </Typography>\n      <Typography\n        component=\"h1\"\n        variant=\"h3\"\n      >\n        {customer.name}\n      </Typography>\n    </div>\n  );\n};\n\nHeader.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Header;\n","import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/styles';\nimport {\n  Modal,\n  Card,\n  CardContent,\n  CardActions,\n  Grid,\n  Typography,\n  TextField,\n  Button,\n  colors\n} from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    outline: 'none',\n    boxShadow: theme.shadows[20],\n    width: 700,\n    maxHeight: '100%',\n    overflowY: 'auto',\n    maxWidth: '100%'\n  },\n  container: {\n    marginTop: theme.spacing(3)\n  },\n  actions: {\n    justifyContent: 'flex-end'\n  },\n  saveButton: {\n    color: theme.palette.white,\n    backgroundColor: colors.green[600],\n    '&:hover': {\n      backgroundColor: colors.green[900]\n    }\n  }\n}));\n\nconst CustomerEdit = props => {\n  const { open, onClose, customer, className, ...rest } = props;\n\n  const classes = useStyles();\n\n  const [formState, setFormState] = useState({\n    ...customer\n  });\n\n  if (!open) {\n    return null;\n  }\n\n  const handleFieldChange = event => {\n    event.persist();\n    setFormState(formState => ({\n      ...formState,\n      [event.target.name]:\n        event.target.type === 'checkbox'\n          ? event.target.checked\n          : event.target.value\n    }));\n  };\n\n  return (\n    <Modal onClose={onClose} open={open}>\n      <Card {...rest} className={clsx(classes.root, className)}>\n        <form>\n          <CardContent>\n            <Typography align=\"center\" gutterBottom variant=\"h3\">\n              Edit Transaction\n            </Typography>\n            <Grid className={classes.container} container spacing={3}>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Email address\"\n                  name=\"email\"\n                  onChange={handleFieldChange}\n                  value={formState.email}\n                  variant=\"outlined\"\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Message\"\n                  name=\"message\"\n                  onChange={handleFieldChange}\n                  value={formState.email}\n                  variant=\"outlined\"\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Amount\"\n                  name=\"amount\"\n                  type=\"number\"\n                  variant=\"outlined\"\n                />\n              </Grid>\n            </Grid>\n          </CardContent>\n          <CardActions className={classes.actions}>\n            <Button onClick={onClose} variant=\"contained\">\n              Close\n            </Button>\n            <Button\n              className={classes.saveButton}\n              onClick={onClose}\n              variant=\"contained\">\n              Save\n            </Button>\n          </CardActions>\n        </form>\n      </Card>\n    </Modal>\n  );\n};\n\nCustomerEdit.displayName = 'CustomerEdit';\n\nCustomerEdit.propTypes = {\n  className: PropTypes.string,\n  customer: PropTypes.any,\n  onClose: PropTypes.func,\n  open: PropTypes.bool\n};\n\nCustomerEdit.defaultProps = {\n  open: false,\n  onClose: () => {}\n};\n\nexport default CustomerEdit;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  CardActions,\n  Button,\n  Divider,\n  Table,\n  TableBody,\n  TableRow,\n  TableCell,\n  colors\n} from '@material-ui/core';\nimport EditIcon from '@material-ui/icons/Edit';\n\nimport { Label } from 'components';\nimport { CustomerEdit } from './components';\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  content: {\n    padding: 0\n  },\n  actions: {\n    flexDirection: 'column',\n    alignItems: 'flex-start',\n    '& > * + *': {\n      marginLeft: 0\n    }\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1)\n  }\n}));\n\nconst CustomerInfo = props => {\n  const { customer, className, ...rest } = props;\n\n  const classes = useStyles();\n\n  const [openEdit, setOpenEdit] = useState(false);\n\n  const handleEditOpen = () => {\n    setOpenEdit(true);\n  };\n\n  const handleEditClose = () => {\n    setOpenEdit(false);\n  };\n\n  return (\n    <Card {...rest} className={clsx(classes.root, className)}>\n      <CardHeader title=\"Transaction info\" />\n      <Divider />\n      <CardContent className={classes.content}>\n        <Table>\n          <TableBody>\n            <TableRow selected>\n              <TableCell>Created at</TableCell>\n              <TableCell>{new Date().toUTCString()}</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>Email</TableCell>\n              <TableCell>{customer.email}</TableCell>\n            </TableRow>\n            <TableRow selected>\n              <TableCell>Amount</TableCell>\n              <TableCell>500000VND</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Message</TableCell>\n              <TableCell>{customer.email}</TableCell>\n            </TableRow>\n\n            <TableRow selected>\n              <TableCell>Type</TableCell>\n              <TableCell>\n                {Math.random() > 0.5 ? (\n                  <Label color={colors.green[600]}>Income</Label>\n                ) : (\n                  <Label color={colors.red[600]}>Outgo</Label>\n                )}\n              </TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>Update requested</TableCell>\n              <TableCell>\n                {Math.random() > 0.5 ? (\n                  <Label color={colors.orange[600]}>Yes</Label>\n                ) : (\n                  <Label color={colors.grey[600]}>No</Label>\n                )}\n              </TableCell>\n            </TableRow>\n            {/* <TableRow selected>\n              <TableCell>Phone</TableCell>\n              <TableCell>{customer.phone}</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>State/Region</TableCell>\n              <TableCell>{customer.state}</TableCell>\n            </TableRow>\n            <TableRow selected>\n              <TableCell>Country</TableCell>\n              <TableCell>{customer.country}</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>Address 1</TableCell>\n              <TableCell>{customer.address1}</TableCell>\n            </TableRow>\n            <TableRow selected>\n              <TableCell>Address 2</TableCell>\n              <TableCell>{customer.address2}</TableCell>\n            </TableRow> */}\n          </TableBody>\n        </Table>\n      </CardContent>\n      <CardActions className={classes.actions}>\n        <Button onClick={handleEditOpen}>\n          <EditIcon className={classes.buttonIcon} />\n          Edit\n        </Button>\n      </CardActions>\n      <CustomerEdit\n        customer={customer}\n        onClose={handleEditClose}\n        open={openEdit}\n      />\n    </Card>\n  );\n};\n\nCustomerInfo.propTypes = {\n  className: PropTypes.string,\n  customer: PropTypes.object.isRequired\n};\n\nexport default CustomerInfo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport {\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  Divider,\n  Table,\n  TableBody,\n  TableCell,\n  TableRow\n} from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  content: {\n    padding: 0\n  },\n  actions: {\n    flexDirection: 'column',\n    alignItems: 'flex-start',\n    '& > * + *': {\n      marginLeft: 0\n    }\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1)\n  }\n}));\n\nconst Invoices = props => {\n  const { className, ...rest } = props;\n\n  const classes = useStyles();\n\n  return (\n    <Card {...rest} className={clsx(classes.root, className)}>\n      <CardHeader title=\"Billing\" />\n      <Divider />\n      <CardContent className={classes.content}>\n        <Table>\n          <TableBody>\n            {/* <TableRow>\n              <TableCell>Auto CC Pay</TableCell>\n              <TableCell>\n                {customer.iban}\n                <div>\n                  <Label\n                    color={\n                      customer.autoCC ? colors.green[600] : colors.red[600]\n                    }>\n                    {customer.autoCC ? 'YES' : 'NO'}\n                  </Label>\n                </div>\n              </TableCell>\n            </TableRow> */}\n            <TableRow>\n              <TableCell>Balance</TableCell>\n              <TableCell>10000000</TableCell>\n            </TableRow>\n            <TableRow selected>\n              <TableCell>Spent</TableCell>\n              <TableCell>500000</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>Total</TableCell>\n              <TableCell>105000000</TableCell>\n            </TableRow>\n            <TableRow selected>\n              <TableCell>Enrolled courses</TableCell>\n              <TableCell>20</TableCell>\n            </TableRow>\n            {/* <TableRow>\n              <TableCell>Refunded</TableCell>\n              <TableCell>\n                {refundedInvoices.length} ({customer.currency}\n                {refundedTotal})\n              </TableCell>\n            </TableRow>\n            <TableRow selected>\n              <TableCell>Gross Income</TableCell>\n              <TableCell>\n                {incomeInvoices.length} ({customer.currency}\n                {incomeTotal})\n              </TableCell>\n            </TableRow> */}\n          </TableBody>\n        </Table>\n      </CardContent>\n      <CardActions className={classes.actions}>\n        {/* <Button onClick={handleEditOpen}>\n          <EditIcon className={classes.buttonIcon} />\n          Edit\n        </Button>\n        <Button>\n          <AttachMoneyIcon className={classes.buttonIcon} />\n          Create Invoice\n        </Button>\n        <Button>\n          <ReceiptIcon className={classes.buttonIcon} />\n          Generate Due Invoices\n        </Button> */}\n      </CardActions>\n    </Card>\n  );\n};\n\nInvoices.propTypes = {\n  className: PropTypes.string,\n  customer: PropTypes.object.isRequired\n};\n\nexport default Invoices;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport { makeStyles } from '@material-ui/styles';\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  TextField,\n  Button,\n  Divider,\n  Table,\n  TableBody,\n  TableRow,\n  TableCell\n} from '@material-ui/core';\nimport MaiIcon from '@material-ui/icons/MailOutline';\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  content: {},\n  sendButton: {\n    marginTop: theme.spacing(2)\n  },\n  mailIcon: {\n    marginRight: theme.spacing(1)\n  },\n  table: {\n    marginTop: theme.spacing(2)\n  },\n  cell: {\n    padding: theme.spacing(1)\n  }\n}));\nconst SendEmails = props => {\n  const { customer, className, ...rest } = props;\n\n  const classes = useStyles();\n\n  const options = [\n    'Resend last invoice',\n    'Send password reset',\n    'Send verification'\n  ];\n\n  const [option, setOption] = useState(options[0]);\n\n  const handleChange = event => {\n    event.persist();\n\n    setOption(event.target.value);\n  };\n\n  return (\n    <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardHeader title=\"Send emails\" />\n      <Divider />\n      <CardContent className={classes.content}>\n        <TextField\n          fullWidth\n          name=\"option\"\n          onChange={handleChange}\n          select\n          // eslint-disable-next-line react/jsx-sort-props\n          SelectProps={{ native: true }}\n          value={option}\n          variant=\"outlined\"\n        >\n          {options.map(option => (\n            <option\n              key={option}\n              value={option}\n            >\n              {option}\n            </option>\n          ))}\n        </TextField>\n        <Button\n          className={classes.sendButton}\n          variant=\"contained\"\n        >\n          <MaiIcon className={classes.mailIcon} />\n          Send email\n        </Button>\n        <Table className={classes.table}>\n          <TableBody>\n            {customer.emails.map(email => (\n              <TableRow key={email.id}>\n                <TableCell className={classes.cell}>\n                  {moment(email.created_at).format('DD/MM/YYYY | HH:MM')}\n                </TableCell>\n                <TableCell className={classes.cell}>\n                  {email.description}\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </CardContent>\n    </Card>\n  );\n};\n\nSendEmails.propTypes = {\n  className: PropTypes.string,\n  customer: PropTypes.object.isRequired\n};\n\nexport default SendEmails;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  Button,\n  Divider\n} from '@material-ui/core';\nimport NotInterestedIcon from '@material-ui/icons/NotInterested';\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  mainActions: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'flex-start'\n  },\n  notice: {\n    marginTop: theme.spacing(1)\n  },\n  deleteButton: {\n    marginTop: theme.spacing(1),\n    color: theme.palette.white,\n    backgroundColor: theme.palette.error.main,\n    '&:hover': {\n      backgroundColor: theme.palette.error.dark\n    }\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1)\n  }\n}));\nconst OtherActions = props => {\n  const { className, ...rest } = props;\n\n  const classes = useStyles();\n\n  return (\n    <Card {...rest} className={clsx(classes.root, className)}>\n      <CardHeader title=\"Other actions\" />\n      <Divider />\n      <CardContent>\n        <Button className={classes.deleteButton}>\n          <NotInterestedIcon className={classes.buttonIcon} />\n          Close student Account\n        </Button>\n      </CardContent>\n    </Card>\n  );\n};\n\nOtherActions.propTypes = {\n  className: PropTypes.string\n};\n\nexport default OtherActions;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport { Grid } from '@material-ui/core';\n\nimport axios from 'utils/axios';\nimport { CustomerInfo } from './components';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst Summary = props => {\n  const { className, ...rest } = props;\n\n  const classes = useStyles();\n  const [customer, setCustomer] = useState();\n\n  useEffect(() => {\n    let mounted = true;\n\n    const fetchCustomer = () => {\n      axios.get('/api/management/customers/1/summary').then(response => {\n        if (mounted) {\n          setCustomer(response.data.summary);\n        }\n      });\n    };\n\n    fetchCustomer();\n\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  if (!customer) {\n    return null;\n  }\n\n  return (\n    <Grid\n      {...rest}\n      className={clsx(classes.root, className)}\n      container\n      spacing={3}>\n      <Grid item lg={4} md={6} xl={3} xs={12}>\n        <CustomerInfo customer={customer} />\n      </Grid>\n      {/* <Grid item lg={4} md={6} xl={3} xs={12}>\n        <Invoices customer={customer} />\n      </Grid> */}\n      {/* <Grid item lg={4} md={6} xl={3} xs={12}>\n        <SendEmails customer={customer} />\n      </Grid> */}\n      {/* <Grid item lg={4} md={6} xl={3} xs={12}>\n        <OtherActions />\n      </Grid> */}\n    </Grid>\n  );\n};\n\nSummary.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Summary;\n","import React, { useState, useEffect } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { makeStyles } from '@material-ui/styles';\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardContent,\n  Divider,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  colors\n} from '@material-ui/core';\n\nimport axios from 'utils/axios';\nimport { Label, GenericMoreButton } from 'components';\n\nconst useStyles = makeStyles(() => ({\n  root: {},\n  content: {\n    padding: 0\n  },\n  inner: {\n    minWidth: 1150\n  }\n}));\n\nconst Invoices = props => {\n  const { className, ...rest } = props;\n\n  const classes = useStyles();\n  const [invoices, setInvoices] = useState([]);\n\n  useEffect(() => {\n    let mounted = true;\n\n    const fetchInvoices = () => {\n      axios.get('/api/management/customers/1/invoices').then(response => {\n        if (mounted) {\n          setInvoices(response.data.invoices);\n        }\n      });\n    };\n\n    fetchInvoices();\n\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  const statusColors = {\n    pending: colors.orange[600],\n    paid: colors.green[600],\n    rejected: colors.red[600]\n  };\n\n  return (\n    <div\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <Card>\n        <CardHeader\n          action={<GenericMoreButton />}\n          title=\"Customer invoices\"\n        />\n        <Divider />\n        <CardContent className={classes.content}>\n          <PerfectScrollbar>\n            <div className={classes.inner}>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>ID</TableCell>\n                    <TableCell>Date</TableCell>\n                    <TableCell>Description</TableCell>\n                    <TableCell>Payment Method</TableCell>\n                    <TableCell>Total</TableCell>\n                    <TableCell>Status</TableCell>\n                    <TableCell align=\"right\">Actions</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {invoices.map(invoice => (\n                    <TableRow key={invoice.id}>\n                      <TableCell>#{invoice.id.split('-').shift()}</TableCell>\n                      <TableCell>\n                        {moment(invoice.date).format('DD/MM/YYYY | HH:MM')}\n                      </TableCell>\n                      <TableCell>{invoice.description}</TableCell>\n                      <TableCell>{invoice.paymentMethod}</TableCell>\n                      <TableCell>\n                        {invoice.currency}\n                        {invoice.value}\n                      </TableCell>\n                      <TableCell>\n                        <Label\n                          color={statusColors[invoice.status]}\n                          variant=\"outlined\"\n                        >\n                          {invoice.status}\n                        </Label>\n                      </TableCell>\n                      <TableCell align=\"right\">\n                        <Button\n                          color=\"primary\"\n                          component={RouterLink}\n                          size=\"small\"\n                          to={'/management/invoices/1'}\n                          variant=\"outlined\"\n                        >\n                          View\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </PerfectScrollbar>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nInvoices.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Invoices;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { makeStyles } from '@material-ui/styles';\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  Divider,\n  Typography,\n  Table,\n  TableBody,\n  TableCell,\n  TableRow,\n  colors\n} from '@material-ui/core';\n\nimport axios from 'utils/axios';\nimport { Label } from 'components';\n\nconst useStyles = makeStyles(() => ({\n  root: {},\n  content: {\n    padding: 0\n  },\n  inner: {\n    minWidth: 1150\n  },\n  methodCell: {\n    width: 100\n  },\n  statusCell: {\n    width: 64\n  }\n}));\n\nconst Logs = props => {\n  const { className, ...rest } = props;\n\n  const classes = useStyles();\n\n  const [logs, setLogs] = useState([]);\n\n  useEffect(() => {\n    let mounted = true;\n\n    const fetchLogs = () => {\n      axios.get('/api/management/customers/1/logs').then(response => {\n        if (mounted) {\n          setLogs(response.data.logs);\n        }\n      });\n    };\n\n    fetchLogs();\n\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  return (\n    <div\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <Card>\n        <CardHeader title=\"Customer logs\" />\n        <Divider />\n        <CardContent className={classes.content}>\n          <PerfectScrollbar options={{ suppressScrollY: true }}>\n            <div className={classes.inner}>\n              <Table>\n                <TableBody>\n                  {logs.map(log => (\n                    <TableRow key={log.id}>\n                      <TableCell className={classes.methodCell}>\n                        <Typography variant=\"h6\">{log.method}</Typography>\n                      </TableCell>\n                      <TableCell className={classes.statusCell}>\n                        <Label\n                          color={\n                            log.status === 200\n                              ? colors.green[600]\n                              : colors.red[600]\n                          }\n                        >\n                          {log.status}\n                        </Label>\n                      </TableCell>\n                      <TableCell>{log.route}</TableCell>\n                      <TableCell>{log.desc}</TableCell>\n                      <TableCell align=\"right\">{log.IP}</TableCell>\n                      <TableCell align=\"right\">\n                        {moment(log.created_at).format('YYYY/MM/DD | hh:mm:ss')}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </PerfectScrollbar>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nLogs.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Logs;\n","import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/styles';\nimport { Tabs, Tab, Divider, colors } from '@material-ui/core';\n\nimport { Page } from 'components';\nimport { Header, Summary, Invoices, Logs } from './components';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: theme.spacing(3)\n  },\n  tabs: {\n    marginTop: theme.spacing(3)\n  },\n  divider: {\n    backgroundColor: colors.grey[300]\n  },\n  content: {\n    marginTop: theme.spacing(3)\n  }\n}));\n\nconst AccountantTransactionDetails = props => {\n  const { match, history } = props;\n  const classes = useStyles();\n  const { id, tab } = match.params;\n\n  const handleTabsChange = (event, value) => {\n    history.push(value);\n  };\n\n  const tabs = [\n    { value: 'summary', label: 'Summary' },\n    { value: 'invoices', label: 'Invoices' },\n    { value: 'logs', label: 'Logs' }\n  ];\n\n  if (!tab) {\n    return <Redirect to={`/management/customers/${id}/summary`} />;\n  }\n\n  if (!tabs.find(t => t.value === tab)) {\n    return <Redirect to=\"/errors/error-404\" />;\n  }\n\n  return (\n    <Page className={classes.root} title=\"Customer Management Details\">\n      <Header />\n      <Tabs\n        className={classes.tabs}\n        onChange={handleTabsChange}\n        scrollButtons=\"auto\"\n        value={tab}\n        variant=\"scrollable\">\n        {tabs.map(tab => (\n          <Tab key={tab.value} label={tab.label} value={tab.value} />\n        ))}\n      </Tabs>\n      <Divider className={classes.divider} />\n      <div className={classes.content}>\n        {tab === 'summary' && <Summary />}\n        {tab === 'invoices' && <Invoices />}\n        {tab === 'logs' && <Logs />}\n      </div>\n    </Page>\n  );\n};\n\nAccountantTransactionDetails.propTypes = {\n  history: PropTypes.object.isRequired,\n  match: PropTypes.object.isRequired\n};\n\nexport default AccountantTransactionDetails;\n"],"sourceRoot":""}