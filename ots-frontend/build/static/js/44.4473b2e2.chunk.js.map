{"version":3,"sources":["services/transaction.service.js","views/_AccountantViews/AccountantTransactionCreate/AccountantTransactionCreate.js"],"names":["TransactionService","year","axios","get","params","student_id","data","post","useStyles","makeStyles","root","padding","AccountantTransactionCreate","classes","form","useForm","auth","useAuth","type","watch","className","title","Card","autoComplete","onSubmit","handleSubmit","accountant_id","user","user_id","_createOne","then","alert","reset","catch","CardHeader","Divider","CardContent","Grid","container","spacing","item","md","xs","TextField","fullWidth","label","register","required","variant","select","defaultValue","MenuItem","value","helperText","CardActions","Button","saveButton","color","disabled","formState","isSubmitting"],"mappings":"yKAEMA,E,+FAKJ,SAAkBC,GAChB,OAAOC,IAAMC,IAAI,uBAAwB,CAAEC,OAAQ,CAAEH,Y,qBAGvD,WACE,OAAOC,IAAMC,IAAI,mB,yBAGnB,SAAmBE,GACjB,OAAOH,IAAMC,IAAI,gBAAiB,CAAEC,OAAQ,CAAEC,kB,wBAGhD,SAAkBC,GAChB,OAAOJ,IAAMK,KAAK,gBAAiBD,O,KAIxBN,O,oOCLTQ,EAAYC,aAAW,iBAAO,CAClCC,KAAM,CACJC,QAAS,YAkHEC,EA9GqB,WAClC,IAAMC,EAAUL,IAGVM,EAAOC,cAEPC,EAAOC,cAEPC,EAAOJ,EAAKK,MAAM,QAqBxB,OACE,kBAAC,IAAD,CAAMC,UAAWP,EAAQH,KAAMW,MAAM,iBACnC,kBAACC,EAAA,EAAD,KACE,0BAAMC,aAAa,MAAMC,SAAUV,EAAKW,cAtB7B,SAAAnB,GAAS,IAAD,EAEvB,OADAA,EAAKoB,cAAL,UAAqBV,EAAKW,YAA1B,aAAqB,EAAWC,QACzB5B,IAAmB6B,WAAWvB,GAClCwB,MAAK,WACJC,MAAM,kCACNjB,EAAKkB,WAENC,OAAM,kBAAMF,MAAM,mBAgBf,kBAACG,EAAA,EAAD,CAAYb,MAAM,iCAClB,kBAACc,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACb,WAATrB,GACC,kBAACmB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,IACpB,kBAACC,EAAA,EAAD,eACEC,WAAS,EACTC,MAAM,SACF/B,EAAKgC,SAAS,SAHpB,CAIEC,UAAQ,EACRC,QAAQ,eAKd,kBAACX,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,IACpB,kBAACC,EAAA,EAAD,eACEC,WAAS,EACTC,MAAM,iBACF/B,EAAKgC,SAAS,WAHpB,CAIEC,UAAQ,EACRC,QAAQ,eAGZ,kBAACX,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,IACpB,kBAACC,EAAA,EAAD,eACEC,WAAS,EACTC,MAAM,YACNI,QAAM,GACFnC,EAAKgC,SAAS,QAJpB,CAKEI,aAAa,QACbH,UAAQ,EACRC,QAAQ,aACR,kBAACG,EAAA,EAAD,CAAUC,MAAM,UAAhB,OACA,kBAACD,EAAA,EAAD,CAAUC,MAAM,SAAhB,SAGJ,kBAACf,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,IACpB,kBAACC,EAAA,EAAD,eACEC,WAAS,EACTC,MAAM,oBACN3B,KAAK,UACDJ,EAAKgC,SAAS,UAJpB,CAKEC,UAAQ,EACRC,QAAQ,eAGZ,kBAACX,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,IACpB,kBAACC,EAAA,EAAD,eACEC,WAAS,EACTS,WAAW,wCACPvC,EAAKgC,SAAS,aAHpB,CAIE5B,KAAK,iBACL8B,QAAQ,iBAKhB,kBAACb,EAAA,EAAD,MACA,kBAACmB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEnC,UAAWP,EAAQ2C,WACnBC,MAAM,UACNC,SAAU5C,EAAK6C,UAAUC,aACzB1C,KAAK,SACL8B,QAAQ,aALV","file":"static/js/44.4473b2e2.chunk.js","sourcesContent":["import axios from './axios';\n\nclass TransactionService {\n  // static _getOne(voucher_id) {\n  //   return axios.get('/vouchers/' + voucher_id);\n  // }\n\n  static _getReport(year) {\n    return axios.get('/transactions/report', { params: { year } });\n  }\n\n  static _getAll() {\n    return axios.get('/transactions');\n  }\n\n  static _getAllById(student_id) {\n    return axios.get('/transactions', { params: { student_id } });\n  }\n\n  static _createOne(data) {\n    return axios.post('/transactions', data);\n  }\n}\n\nexport default TransactionService;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  Divider,\n  Grid,\n  MenuItem,\n  TextField\n} from '@material-ui/core';\n\nimport { Page } from 'components';\nimport { useForm } from 'react-hook-form';\nimport { useAuth } from 'hooks/use-auth';\nimport TransactionService from 'services/transaction.service';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    padding: '1rem'\n  }\n}));\n\nconst AccountantTransactionCreate = () => {\n  const classes = useStyles();\n\n  // const [openSnackbar, setOpenSnackbar] = useState(false);\n  const form = useForm();\n\n  const auth = useAuth();\n\n  const type = form.watch('type');\n\n  const onSubmit = data => {\n    data.accountant_id = auth.user?.user_id;\n    return TransactionService._createOne(data)\n      .then(() => {\n        alert('Ghi nhận thành công');\n        form.reset();\n      })\n      .catch(() => alert('Lỗi'));\n  };\n\n  // const handleSubmit = event => {\n  //   event.preventDefault();\n  //   setOpenSnackbar(true);\n  // };\n\n  // const handleSnackbarClose = () => {\n  //   setOpenSnackbar(false);\n  // };\n\n  return (\n    <Page className={classes.root} title=\"Course Create\">\n      <Card>\n        <form autoComplete=\"off\" onSubmit={form.handleSubmit(onSubmit)}>\n          <CardHeader title=\"Ghi nhận giao dịch\" />\n          <Divider />\n          <CardContent>\n            <Grid container spacing={4}>\n              {type === 'income' && (\n                <Grid item md={6} xs={12}>\n                  <TextField\n                    fullWidth\n                    label=\"Email\"\n                    {...form.register('email')}\n                    required\n                    variant=\"outlined\"\n                  />\n                </Grid>\n              )}\n\n              <Grid item md={6} xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Nội dung\"\n                  {...form.register('message')}\n                  required\n                  variant=\"outlined\"\n                />\n              </Grid>\n              <Grid item md={6} xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Loại\"\n                  select\n                  {...form.register('type')}\n                  defaultValue=\"outgo\"\n                  required\n                  variant=\"outlined\">\n                  <MenuItem value=\"income\">Thu</MenuItem>\n                  <MenuItem value=\"outgo\">Chi</MenuItem>\n                </TextField>\n              </Grid>\n              <Grid item md={6} xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Số tiền\"\n                  type=\"number\"\n                  {...form.register('amount')}\n                  required\n                  variant=\"outlined\"\n                />\n              </Grid>\n              <Grid item md={6} xs={12}>\n                <TextField\n                  fullWidth\n                  helperText=\"Ngày giờ thực hiện\"\n                  {...form.register('issued_at')}\n                  type=\"datetime-local\"\n                  variant=\"outlined\"\n                />\n              </Grid>\n            </Grid>\n          </CardContent>\n          <Divider />\n          <CardActions>\n            <Button\n              className={classes.saveButton}\n              color=\"primary\"\n              disabled={form.formState.isSubmitting}\n              type=\"submit\"\n              variant=\"contained\">\n              Ghi nhận\n            </Button>\n          </CardActions>\n        </form>\n        {/* <SuccessSnackbar onClose={handleSnackbarClose} open={openSnackbar} /> */}\n      </Card>\n    </Page>\n  );\n};\n\nexport default AccountantTransactionCreate;\n"],"sourceRoot":""}