{"version":3,"sources":["../../src/utils/isCheckBoxInput.ts","../../src/utils/isDateObject.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/getEventValue.ts","../../src/logic/isNameInFieldArray.ts","../../src/logic/getNodeParentName.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/utils/omit.ts","../../src/logic/getProxyFormState.ts","../../src/useFormContext.tsx","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/convertToArrayPayload.ts","../../src/useSubscribe.ts","../../src/utils/isString.ts","../../src/logic/generateWatchOutput.ts","../../src/utils/isFunction.ts","../../src/utils/objectHasFunction.ts","../../src/logic/appendErrors.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/focusFieldBy.ts","../../src/logic/isWatched.ts","../../src/utils/cloneObject.ts","../../src/utils/createSubject.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/getValidationModes.ts","../../src/utils/isBoolean.ts","../../src/utils/isFileInput.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioInput.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/isWeb.ts","../../src/utils/live.ts","../../src/utils/unset.ts","../../src/logic/getDirtyFields.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/getRadioValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getResolverOptions.ts","../../src/utils/isRegex.ts","../../src/logic/getRuleValue.ts","../../src/logic/hasValidation.ts","../../src/logic/schemaErrorLookup.ts","../../src/logic/skipValidation.ts","../../src/logic/unsetEmptyArray.ts","../../src/utils/isMessage.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/logic/createFormControl.ts","../../src/useForm.ts"],"names":["element","type","data","Date","value","isObjectType","isNullOrUndefined","Array","isArray","isDateObject","event","isObject","target","isCheckBoxInput","checked","names","name","some","current","substring","search","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","result","compact","split","reduce","key","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","createContext","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","Object","defineProperty","get","keys","length","formStateData","omit","isEmptyObject","find","useSubscribe","props","_props","useRef","useEffect","subscription","disabled","subject","subscribe","next","callback","unsubscribe","tearDown","_names","formValues","isGlobal","isString","watch","add","map","fieldName","watchAll","isFunction","validateAllFieldCriteria","errors","message","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","field","_f","ref","focus","refs","isBlurEvent","has","watchName","startsWith","slice","cloneObject","Set","createSubject","_observers","observer","push","o","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","includes","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","isRadioInput","window","document","isHTMLElement","contains","unset","previousObjRef","updatePath","childObject","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","markFieldsDirty","isParentNodeArray","objectHasFunction","defaultValues","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","defaultResult","isValid","validResult","options","values","option","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","getRadioValue","isMultipleSelect","selectedOptions","isCheckBox","getCheckboxValue","getFieldValueAs","_fields","criteriaMode","shouldUseNativeValidation","RegExp","rule","isRegex","mount","required","min","max","maxLength","minLength","pattern","validate","schemaErrorLookup","error","join","foundError","pop","isTouched","isSubmitted","reValidateMode","isValidElement","getValidateError","isMessage","validationData","inputValue","inputRef","setCustomValidity","reportValidity","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","shouldFocusError","createFormControl","delayErrorCallback","_options","_formState","isDirty","isValidating","dirtyFields","submitCount","touchedFields","isSubmitting","isSubmitSuccessful","_defaultValues","_formValues","shouldUnregister","_stateFlags","action","unMount","array","timer","validateFields","_subjects","state","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","args","clearTimeout","setTimeout","_updateValid","shouldSkipRender","resolver","_executeSchema","executeBuildInValidation","_updateFieldArray","method","shouldSetValues","shouldSetFields","fieldValues","argA","argB","unsetEmptyArray","getDirtyFields","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","isCurrentTouched","shouldRender","isFieldDirty","output","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","isCurrentFieldPristine","shouldRenderByError","fieldState","previousFieldError","shouldUpdateValid","delayError","updatedFormState","context","getResolverOptions","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","fieldReference","validateField","fieldError","_removeUnmounted","live","unregister","getValues","_getWatch","generateWatchOutput","_getFieldArray","isWeb","forEach","selectRef","selected","checkboxRef","radioRef","shouldDirty","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","isFieldArray","isWatched","onChange","getEventValue","shouldSkipValidation","hasValidation","deps","skipValidation","watched","onBlur","previousErrorLookupResult","errorLookupResult","fieldNames","convertToArrayPayload","Promise","all","shouldFocus","clearErrors","inputName","setError","info","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","register","getRuleValue","fieldRef","querySelectorAll","radioOrCheckbox","isNameInFieldArray","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","resetField","reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","closest","keepSubmitCount","keepIsSubmitted","entries","keepErrors","setFocus","control","useForm","_formControl","useState","updateFormState","shouldRenderFormState","getProxyFormState"],"mappings":"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","file":"static/js/1.acf0aa9e.chunk.js","sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","export default (value: any[]) => (value || []).filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import React from 'react';\n\nimport { Subject, Subscription } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _props = React.useRef(props);\n  _props.current = props;\n\n  React.useEffect(() => {\n    const tearDown = (subscription: Subscription | false) => {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n\n    const subscription =\n      !props.disabled &&\n      _props.current.subject.subscribe({\n        next: _props.current.callback,\n      });\n\n    return () => tearDown(subscription);\n  }, [props.disabled]);\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { FieldValues, InternalFieldName, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport default (\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n) => {\n  const isArray = Array.isArray(names);\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names as InternalFieldName);\n    return get(formValues, names as InternalFieldName);\n  }\n\n  if (isArray) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName as InternalFieldName),\n        get(formValues, fieldName as InternalFieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\n\nexport default <T>(data: T): boolean => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n  return false;\n};\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import { InternalFieldName, Names } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  _names: Names,\n  isBlurEvent?: boolean,\n) =>\n  !isBlurEvent &&\n  (_names.watchAll ||\n    _names.watch.has(name) ||\n    [..._names.watch].some(\n      (watchName) =>\n        name.startsWith(watchName) &&\n        /^\\.\\w+/.test(name.slice(watchName.length)),\n    ));\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: unknown): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && document.contains(ref);\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import deepEqual from '../utils/deepEqual';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isUndefined from '../utils/isUndefined';\nimport objectHasFunction from '../utils/objectHasFunction';\n\nfunction markFieldsDirty<U>(data: U, fields: Record<string, any> = {}) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n\n  return fields;\n}\n\nfunction getDirtyFieldsFromDefaultValues<T>(\n  data: T,\n  formValues: T,\n  dirtyFieldsFromValues: any,\n) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        if (\n          isUndefined(formValues) ||\n          isPrimitive(dirtyFieldsFromValues[key])\n        ) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key])\n            ? markFieldsDirty(data[key], [])\n            : { ...markFieldsDirty(data[key]) };\n        } else {\n          getDirtyFieldsFromDefaultValues(\n            data[key],\n            isNullOrUndefined(formValues) ? {} : formValues[key],\n            dirtyFieldsFromValues[key],\n          );\n        }\n      } else {\n        dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n      }\n    }\n  }\n\n  return dirtyFieldsFromValues;\n}\n\nexport default <T>(defaultValues: T, formValues: T) =>\n  getDirtyFieldsFromDefaultValues(\n    defaultValues,\n    formValues,\n    markFieldsDirty(formValues),\n  );\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field, NativeFieldValue } from '../types';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends NativeFieldValue>(\n  value: T,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate && isString(value)\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import {\n  ValidationRule,\n  ValidationValue,\n  ValidationValueMessage,\n} from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends ValidationValue>(\n  rule?: ValidationRule<T> | ValidationValueMessage<T>,\n) =>\n  isUndefined(rule)\n    ? undefined\n    : isRegex(rule)\n    ? rule.source\n    : isObject(rule)\n    ? isRegex(rule.value)\n      ? rule.value.source\n      : rule.value\n    : rule;\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name)).length && unset(ref, name);\n","import React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldError,\n  InternalFieldErrors,\n  Message,\n  NativeFieldValue,\n} from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async <T extends NativeFieldValue>(\n  field: Field,\n  inputValue: T,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidity = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue as number)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber ||\n        parseFloat(inputValue as string);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue as string);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidity(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidity(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidity(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  EventType,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckbox from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport generateWatchOutput from './generateWatchOutput';\nimport getDirtyFields from './getDirtyFields';\nimport getEventValue from './getEventValue';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport getRuleValue from './getRuleValue';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport isWatched from './isWatched';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    method,\n    args,\n    values = [],\n    shouldSetValues = true,\n    shouldSetFields = true,\n  ) => {\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSetValues &&\n        set(_formState.touchedFields as TFieldValues, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs?: boolean,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n\n  const _getFieldArray = (name: InternalFieldName) =>\n    compact(\n      get(\n        _stateFlags.mount ? _formValues : _defaultValues,\n        name,\n        props.shouldUnregister ? get(_defaultValues, name, []) : [],\n      ),\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else if (!isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = fieldValue;\n\n          if (!fieldReference.ref.type) {\n            _subjects.watch.next({\n              name,\n            });\n          }\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = <\n    T extends InternalFieldName,\n    K extends SetFieldValue<TFieldValues>,\n    U,\n  >(\n    name: T,\n    value: K,\n    options: U,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const onChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type\n        ? getFieldValue(field._f)\n        : getEventValue(event);\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const watched = isWatched(name, _names, isBlurEvent);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      set(_formValues, name, fieldValue);\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(watched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info as {\n                name?: FieldPath<TFieldValues>;\n                type?: EventType;\n                value?: unknown;\n              },\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    let field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    !isUndefined(options.value) &&\n      !options.disabled &&\n      set(_formValues, name, get(_formValues, name, options.value));\n\n    field\n      ? isBoolean(options.disabled) &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true);\n\n    return {\n      ...(isBoolean(options.disabled) ? { disabled: options.disabled } : {}),\n      ...(_options.shouldUseNativeValidation\n        ? {\n            required: !!options.required,\n            min: getRuleValue(options.min),\n            max: getRuleValue(options.max),\n            minLength: getRuleValue<number>(options.minLength) as number,\n            maxLength: getRuleValue(options.maxLength) as number,\n            pattern: getRuleValue(options.pattern) as string,\n          }\n        : {}),\n      name,\n      onChange,\n      onBlur: onChange,\n      ref: (ref: HTMLInputElement | null): void => {\n        if (ref) {\n          register(name, options);\n          field = get(_fields, name);\n\n          const fieldRef = isUndefined(ref.value)\n            ? ref.querySelectorAll\n              ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) || ref\n              : ref\n            : ref;\n          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n\n          if (\n            fieldRef === field._f.ref ||\n            (radioOrCheckbox &&\n              compact(field._f.refs).find((option) => option === fieldRef))\n          ) {\n            return;\n          }\n\n          set(_fields, name, {\n            _f: radioOrCheckbox\n              ? {\n                  ...field._f,\n                  refs: [...compact(field._f.refs).filter(live), fieldRef],\n                  ref: { type: fieldRef.type, name },\n                }\n              : {\n                  ...field._f,\n                  ref: fieldRef,\n                },\n          });\n\n          !options.disabled && updateValidAndValue(name, false, fieldRef);\n        } else {\n          field = get(_fields, name, {});\n\n          if (field._f) {\n            field._f.mount = false;\n          }\n\n          (_options.shouldUnregister || options.shouldUnregister) &&\n            !(isNameInFieldArray(_names.array, name) && _stateFlags.action) &&\n            _names.unMount.add(name);\n        }\n      },\n    };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = _options.shouldUnregister\n        ? cloneObject(_formValues)\n        : { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (isUndefined(options.defaultValue)) {\n      setValue(name, get(_defaultValues, name));\n    } else {\n      setValue(name, options.defaultValue);\n      set(_defaultValues, name, options.defaultValue);\n    }\n\n    if (!options.keepTouched) {\n      unset(_formState.touchedFields, name);\n    }\n\n    if (!options.keepDirty) {\n      unset(_formState.dirtyFields, name);\n      _formState.isDirty = options.defaultValue\n        ? _getDirty(name, get(_defaultValues, name))\n        : _getDirty();\n    }\n\n    if (!options.keepError) {\n      unset(_formState.errors, name);\n      _proxyFormState.isValid && _updateValid();\n    }\n\n    _subjects.state.next({ ..._formState });\n  };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values =\n      formValues && !isEmptyObject(formValues)\n        ? cloneUpdatedValues\n        : _defaultValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb && isUndefined(formValues)) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n\n      _fields = {};\n\n      _subjects.array.next({\n        values,\n      });\n\n      _subjects.watch.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n\n    _stateFlags.watch = !!props.shouldUnregister;\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: (value) => {\n      if (shouldRenderFormState(value, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...value,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n"],"sourceRoot":""}