{"version":3,"sources":["services/transaction.service.js","views/_AdminViews/AdminFinancialReport/components/EarningsSegmentation/components/Chart/Chart.js","views/_AdminViews/AdminFinancialReport/components/EarningsSegmentation/EarningsSegmentation.js","views/_AdminViews/AdminFinancialReport/components/FinancialStats/components/Chart/Chart.js","views/_AdminViews/AdminFinancialReport/components/FinancialStats/FinancialStats.js","views/_AdminViews/AdminFinancialReport/components/FinancialStatsQuarter/components/Chart/Chart.js","views/_AdminViews/AdminFinancialReport/components/FinancialStatsQuarter/FinancialStatsQuarter.js","views/_AdminViews/AdminFinancialReport/components/Header/Header.js","views/_AdminViews/AdminFinancialReport/components/MostProfitableProducts/components/CircularProgress/CircularProgress.js","views/_AdminViews/AdminFinancialReport/components/MostProfitableProducts/MostProfitableProducts.js","views/_AdminViews/AdminFinancialReport/components/Overview/Overview.js","views/_AdminViews/AdminFinancialReport/components/TopReferrals/TopReferrals.js","views/_AdminViews/AdminFinancialReport/components/CustomerActivity/CustomerActivity.js","views/_AdminViews/AdminFinancialReport/components/LatestOrders/LatestOrders.js","views/_AdminViews/AdminFinancialReport/AdminFinancialReport.js"],"names":["TransactionService","year","axios","get","params","student_id","data","post","makeStyles","root","position","theme","content","padding","paddingBottom","chartContainer","spacing","chart","height","statsContainer","display","statsItem","flexGrow","flexDirection","justifyContent","borderRight","palette","divider","useStyles","Chart","props","dataProp","labels","className","rest","classes","useTheme","datasets","label","backgroundColor","primary","main","thisYear","colors","grey","lastYear","options","responsive","maintainAspectRatio","animation","cornerRadius","legend","layout","scales","xAxes","barThickness","maxBarThickness","barPercentage","categoryPercentage","gridLines","drawBorder","ticks","fontColor","text","secondary","yAxes","borderDash","borderDashOffset","color","zeroLineBorderDash","zeroLineBorderDashOffset","zeroLineColor","beginAtZero","min","maxTicksLimit","callback","value","formatter","format","tooltips","enabled","mode","intersect","caretSize","yPadding","xPadding","borderWidth","borderColor","white","titleFontColor","bodyFontColor","footerFontColor","callbacks","title","tooltipItem","datasetIndex","clsx","inner","minWidth","FinancialStats","report","incomeByMonth","Array","fill","outgoByMonth","forEach","e","month","sum","type","Card","CardHeader","Divider","CardContent","FinancialStatsQuarter","incomeByQuart","outgoByQuart","i","Math","floor","dates","alignItems","calendarTodayIcon","marginRight","Header","Grid","container","justify","item","lg","xs","Typography","component","gutterBottom","variant","defaultProps","width","circle1","stroke","strokeWidth","circle2","strokeDasharray","details","image","flexShrink","subscriptions","fontWeight","typography","fontWeightMedium","price","whiteSpace","green","conversion","conversionStats","actions","arrowForwardIcon","marginLeft","textAlign","breakpoints","up","down","borderBottom","valueContainer","Overview","totalIncome","totalOutgo","sm","avatar","fontSize","fontWeightBold","date","progressContainer","orange","red","card","AdminFinancialReport","useState","setReport","Date","getFullYear","setYear","fetchData","_getReport","then","res","useEffect","TextField","onChange","target","size","Button","onClick","style"],"mappings":"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","file":"static/js/45.09333577.chunk.js","sourcesContent":["import axios from './axios';\n\nclass TransactionService {\n  // static _getOne(voucher_id) {\n  //   return axios.get('/vouchers/' + voucher_id);\n  // }\n\n  static _getReport(year) {\n    return axios.get('/transactions/report', { params: { year } });\n  }\n\n  static _getAll() {\n    return axios.get('/transactions');\n  }\n\n  static _getAllById(student_id) {\n    return axios.get('/transactions', { params: { student_id } });\n  }\n\n  static _createOne(data) {\n    return axios.post('/transactions', data);\n  }\n}\n\nexport default TransactionService;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { Doughnut } from 'react-chartjs-2';\nimport { makeStyles, useTheme } from '@material-ui/styles';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    position: 'relative'\n  }\n}));\n\nconst Chart = props => {\n  const { data: dataProp, className, ...rest } = props;\n\n  const classes = useStyles();\n  const theme = useTheme();\n\n  const data = {\n    datasets: [\n      {\n        data: [],\n        backgroundColor: [],\n        borderWidth: 8,\n        borderColor: theme.palette.white,\n        hoverBorderColor: theme.palette.white\n      }\n    ],\n    labels: []\n  };\n\n  for (const item of dataProp) {\n    data.datasets[0].data.push(item.value);\n    data.datasets[0].backgroundColor.push(item.color);\n    data.labels.push(item.label);\n  }\n\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    animation: false,\n    cutoutPercentage: 80,\n    legend: {\n      display: false\n    },\n    layout: {\n      padding: 0\n    },\n    tooltips: {\n      enabled: true,\n      mode: 'index',\n      intersect: false,\n      caretSize: 10,\n      yPadding: 20,\n      xPadding: 20,\n      borderWidth: 1,\n      borderColor: theme.palette.divider,\n      backgroundColor: theme.palette.white,\n      titleFontColor: theme.palette.text.primary,\n      bodyFontColor: theme.palette.text.secondary,\n      footerFontColor: theme.palette.text.secondary,\n      callbacks: {\n        label: function(tooltipItem, data) {\n          const label = data['labels'][tooltipItem['index']];\n          const value = data['datasets'][0]['data'][tooltipItem['index']];\n\n          return `${label}: ${value}%`;\n        }\n      }\n    }\n  };\n\n  return (\n    <div\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <Doughnut\n        data={data}\n        options={options}\n      />\n    </div>\n  );\n};\n\nChart.propTypes = {\n  className: PropTypes.string,\n  data: PropTypes.array.isRequired\n};\n\nexport default Chart;\n","import React, { useState, useEffect } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/styles';\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  Divider,\n  Typography\n} from '@material-ui/core';\n\nimport axios from 'utils/axios';\nimport { GenericMoreButton } from 'components';\nimport { Chart } from './components';\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  content: {\n    padding: 0,\n    '&:last-child': {\n      paddingBottom: 0\n    }\n  },\n  chartContainer: {\n    padding: theme.spacing(3)\n  },\n  chart: {\n    height: 281\n  },\n  statsContainer: {\n    display: 'flex'\n  },\n  statsItem: {\n    flexGrow: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    padding: theme.spacing(3, 2),\n    '&:not(:last-of-type)': {\n      borderRight: `1px solid ${theme.palette.divider}`\n    }\n  }\n}));\n\nconst EarningsSegmentation = props => {\n  const { className, ...rest } = props;\n\n  const classes = useStyles();\n  const [earnings, setEarnings] = useState([]);\n\n  useEffect(() => {\n    let mounted = true;\n\n    const fetchEarnings = () => {\n      axios.get('/api/dashboard/earnings').then(response => {\n        if (mounted) {\n          setEarnings(response.data.earnings);\n        }\n      });\n    };\n\n    fetchEarnings();\n\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  return (\n    <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardHeader\n        action={<GenericMoreButton />}\n        title=\"Earnings Segmentation\"\n      />\n      <Divider />\n      <CardContent className={classes.content}>\n        <div className={classes.chartContainer}>\n          <Chart\n            className={classes.chart}\n            data={earnings}\n          />\n        </div>\n        <Divider />\n        <div className={classes.statsContainer}>\n          {earnings.map(earning => (\n            <div\n              className={classes.statsItem}\n              key={earning.id}\n            >\n              <Typography\n                align=\"center\"\n                component=\"h6\"\n                gutterBottom\n                variant=\"overline\"\n              >\n                {earning.label}\n              </Typography>\n              <Typography\n                align=\"center\"\n                variant=\"h4\"\n              >\n                {earning.value}%\n              </Typography>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nEarningsSegmentation.propTypes = {\n  className: PropTypes.string\n};\n\nexport default EarningsSegmentation;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { Bar } from 'react-chartjs-2';\nimport { makeStyles, useTheme } from '@material-ui/styles';\nimport { colors } from '@material-ui/core';\nimport formatter from 'utils/formatter';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    position: 'relative'\n  }\n}));\n\nconst Chart = props => {\n  const { data: dataProp, labels, className, ...rest } = props;\n\n  const classes = useStyles();\n  const theme = useTheme();\n\n  const data = {\n    datasets: [\n      {\n        label: 'This year',\n        backgroundColor: theme.palette.primary.main,\n        data: dataProp.thisYear\n      },\n      {\n        label: 'Last year',\n        backgroundColor: colors.grey[400],\n        data: dataProp.lastYear\n      }\n    ],\n    labels\n  };\n\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    animation: false,\n    cornerRadius: 20,\n    legend: {\n      display: false\n    },\n    layout: {\n      padding: 0\n    },\n    scales: {\n      xAxes: [\n        {\n          barThickness: 12,\n          maxBarThickness: 10,\n          barPercentage: 0.5,\n          categoryPercentage: 0.5,\n          gridLines: {\n            display: false,\n            drawBorder: false\n          },\n          ticks: {\n            padding: 20,\n            fontColor: theme.palette.text.secondary\n          }\n        }\n      ],\n      yAxes: [\n        {\n          gridLines: {\n            borderDash: [2],\n            borderDashOffset: [2],\n            color: theme.palette.divider,\n            drawBorder: false,\n            zeroLineBorderDash: [2],\n            zeroLineBorderDashOffset: [2],\n            zeroLineColor: theme.palette.divider\n          },\n          ticks: {\n            padding: 20,\n            fontColor: theme.palette.text.secondary,\n            beginAtZero: true,\n            min: 0,\n            maxTicksLimit: 5,\n            callback: value => {\n              return formatter.format(value);\n            }\n          }\n        }\n      ]\n    },\n    tooltips: {\n      enabled: true,\n      mode: 'index',\n      intersect: false,\n      caretSize: 10,\n      yPadding: 20,\n      xPadding: 20,\n      borderWidth: 1,\n      borderColor: theme.palette.divider,\n      backgroundColor: theme.palette.white,\n      titleFontColor: theme.palette.text.primary,\n      bodyFontColor: theme.palette.text.secondary,\n      footerFontColor: theme.palette.text.secondary,\n      callbacks: {\n        title: () => {},\n        label: tooltipItem => {\n          if (tooltipItem.datasetIndex === 0) {\n            return 'Thu: ' + formatter.format(tooltipItem.value);\n          }\n          return 'Chi: ' + formatter.format(tooltipItem.value);\n        }\n      }\n    }\n  };\n\n  return (\n    <div {...rest} className={clsx(classes.root, className)}>\n      <Bar data={data} options={options} />\n    </div>\n  );\n};\n\nChart.propTypes = {\n  className: PropTypes.string,\n  data: PropTypes.object.isRequired,\n  labels: PropTypes.array.isRequired\n};\n\nexport default Chart;\n","import React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { makeStyles } from '@material-ui/styles';\nimport { Card, CardHeader, CardContent, Divider } from '@material-ui/core';\n\nimport { GenericMoreButton } from 'components';\nimport { Chart } from './components';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: '100%'\n  },\n  content: {\n    padding: 0\n  },\n  inner: {\n    minWidth: 700\n  },\n  chart: {\n    padding: theme.spacing(4, 2, 0, 2),\n    height: 400\n  }\n}));\n\nconst FinancialStats = props => {\n  const { className, report, ...rest } = props;\n\n  const classes = useStyles();\n\n  const incomeByMonth = new Array(12).fill(0);\n  const outgoByMonth = new Array(12).fill(0);\n\n  if (report) {\n    report.forEach(e => {\n      const { month, sum, type } = e;\n      if (type === 'income') {\n        incomeByMonth[month - 1] += sum;\n      }\n      if (type === 'outgo') {\n        outgoByMonth[month - 1] += sum;\n      }\n    });\n  }\n\n  const data = {\n    thisYear: incomeByMonth,\n    lastYear: outgoByMonth\n  };\n\n  const labels = [\n    'T1',\n    'T2',\n    'T3',\n    'T4',\n    'T5',\n    'T6',\n    'T7',\n    'T8',\n    'T9',\n    'T10',\n    'T11',\n    'T12'\n  ];\n\n  return (\n    <Card {...rest} className={clsx(classes.root, className)}>\n      <CardHeader title=\"Thu chi theo tháng\" />\n      <Divider />\n      <CardContent className={classes.content}>\n        <PerfectScrollbar>\n          <div className={classes.inner}>\n            <Chart className={classes.chart} data={data} labels={labels} />\n          </div>\n        </PerfectScrollbar>\n      </CardContent>\n    </Card>\n  );\n};\n\nFinancialStats.propTypes = {\n  className: PropTypes.string,\n  report: PropTypes.array.isRequired\n};\n\nexport default FinancialStats;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { Bar } from 'react-chartjs-2';\nimport { makeStyles, useTheme } from '@material-ui/styles';\nimport { colors } from '@material-ui/core';\nimport formatter from 'utils/formatter';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    position: 'relative'\n  }\n}));\n\nconst Chart = props => {\n  const { data: dataProp, labels, className, ...rest } = props;\n\n  const classes = useStyles();\n  const theme = useTheme();\n\n  const data = {\n    datasets: [\n      {\n        label: 'This year',\n        backgroundColor: theme.palette.primary.main,\n        data: dataProp.thisYear\n      },\n      {\n        label: 'Last year',\n        backgroundColor: colors.grey[400],\n        data: dataProp.lastYear\n      }\n    ],\n    labels\n  };\n\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    animation: false,\n    cornerRadius: 20,\n    legend: {\n      display: false\n    },\n    layout: {\n      padding: 0\n    },\n    scales: {\n      xAxes: [\n        {\n          barThickness: 12,\n          maxBarThickness: 10,\n          barPercentage: 0.5,\n          categoryPercentage: 0.5,\n          gridLines: {\n            display: false,\n            drawBorder: false\n          },\n          ticks: {\n            padding: 20,\n            fontColor: theme.palette.text.secondary\n          }\n        }\n      ],\n      yAxes: [\n        {\n          gridLines: {\n            borderDash: [2],\n            borderDashOffset: [2],\n            color: theme.palette.divider,\n            drawBorder: false,\n            zeroLineBorderDash: [2],\n            zeroLineBorderDashOffset: [2],\n            zeroLineColor: theme.palette.divider\n          },\n          ticks: {\n            padding: 20,\n            fontColor: theme.palette.text.secondary,\n            beginAtZero: true,\n            min: 0,\n            maxTicksLimit: 5,\n            callback: value => {\n              return formatter.format(value);\n            }\n          }\n        }\n      ]\n    },\n    tooltips: {\n      enabled: true,\n      mode: 'index',\n      intersect: false,\n      caretSize: 10,\n      yPadding: 20,\n      xPadding: 20,\n      borderWidth: 1,\n      borderColor: theme.palette.divider,\n      backgroundColor: theme.palette.white,\n      titleFontColor: theme.palette.text.primary,\n      bodyFontColor: theme.palette.text.secondary,\n      footerFontColor: theme.palette.text.secondary,\n      callbacks: {\n        title: () => {},\n        label: tooltipItem => {\n          if (tooltipItem.datasetIndex === 0) {\n            return 'Thu: ' + formatter.format(tooltipItem.value);\n          }\n          return 'Chi: ' + formatter.format(tooltipItem.value);\n        }\n      }\n    }\n  };\n\n  return (\n    <div {...rest} className={clsx(classes.root, className)}>\n      <Bar data={data} options={options} />\n    </div>\n  );\n};\n\nChart.propTypes = {\n  className: PropTypes.string,\n  data: PropTypes.object.isRequired,\n  labels: PropTypes.array.isRequired\n};\n\nexport default Chart;\n","import React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { makeStyles } from '@material-ui/styles';\nimport { Card, CardHeader, CardContent, Divider } from '@material-ui/core';\n\nimport { Chart } from './components';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: '100%'\n  },\n  content: {\n    padding: 0\n  },\n  inner: {\n    minWidth: 700\n  },\n  chart: {\n    padding: theme.spacing(4, 2, 0, 2),\n    height: 400\n  }\n}));\n\nconst FinancialStatsQuarter = props => {\n  const { className, report, ...rest } = props;\n\n  const classes = useStyles();\n\n  const incomeByMonth = new Array(12).fill(0);\n  const outgoByMonth = new Array(12).fill(0);\n\n  const incomeByQuart = new Array(4).fill(0);\n  const outgoByQuart = new Array(4).fill(0);\n\n  if (report) {\n    report.forEach(e => {\n      const { month, sum, type } = e;\n      if (type === 'income') {\n        incomeByMonth[month - 1] += sum;\n      }\n      if (type === 'outgo') {\n        outgoByMonth[month - 1] += sum;\n      }\n    });\n\n    incomeByMonth.forEach((e, i) => {\n      incomeByQuart[Math.floor(i / 3)] += e;\n    });\n\n    outgoByMonth.forEach((e, i) => {\n      outgoByQuart[Math.floor(i / 3)] += e;\n    });\n  }\n\n  const data = {\n    thisYear: incomeByQuart,\n    lastYear: outgoByQuart\n  };\n\n  const labels = ['Q1', 'Q2', 'Q3', 'Q4'];\n\n  return (\n    <Card {...rest} className={clsx(classes.root, className)}>\n      <CardHeader title=\"Thu chi theo quý\" />\n      <Divider />\n      <CardContent className={classes.content}>\n        <PerfectScrollbar>\n          <div className={classes.inner}>\n            <Chart className={classes.chart} data={data} labels={labels} />\n          </div>\n        </PerfectScrollbar>\n      </CardContent>\n    </Card>\n  );\n};\n\nFinancialStatsQuarter.propTypes = {\n  className: PropTypes.string,\n  report: PropTypes.array.isRequired\n};\n\nexport default FinancialStatsQuarter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport { Typography, Grid } from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  dates: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end'\n  },\n  calendarTodayIcon: {\n    marginRight: theme.spacing(1)\n  }\n}));\n\nconst Header = props => {\n  const { className, ...rest } = props;\n\n  const classes = useStyles();\n\n  return (\n    <div {...rest} className={clsx(classes.root, className)}>\n      <Grid container justify=\"space-between\" spacing={3}>\n        <Grid item lg={6} xs={12}>\n          <Typography component=\"h2\" gutterBottom variant=\"overline\">\n            Báo cáo\n          </Typography>\n          <Typography component=\"h1\" gutterBottom variant=\"h3\">\n            Thu chi\n          </Typography>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nHeader.propTypes = {\n  className: PropTypes.string\n};\n\nHeader.defaultProps = {};\n\nexport default Header;\n","import React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/styles';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: 56,\n    height: 56\n  },\n  circle1: {\n    stroke: 'rgba(0,0,0,0.05)',\n    fill: 'none',\n    strokeWidth: 4\n  },\n  circle2: {\n    stroke: theme.palette.primary.main,\n    fill: 'none',\n    strokeWidth: 4,\n    animation: '$progress 1s ease-out forwards'\n  },\n  '@keyframes progress': {\n    '0%': {\n      strokeDasharray: '0 100'\n    }\n  }\n}));\n\nconst CircularProgress = props => {\n  const { value, className, ...rest } = props;\n\n  const classes = useStyles();\n\n  return (\n    <div\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <svg viewBox=\"0 0 36 36\">\n        <path\n          className={classes.circle1}\n          d=\"M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831\"\n          strokeDasharray=\"100, 100\"\n        />\n        <path\n          className={classes.circle2}\n          d=\"M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831\"\n          strokeDasharray={`${value}, 100`}\n        />\n      </svg>\n    </div>\n  );\n};\n\nCircularProgress.propTypes = {\n  className: PropTypes.string,\n  value: PropTypes.number.isRequired\n};\n\nexport default CircularProgress;\n","import React, { useState, useEffect } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport clsx from 'clsx';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/styles';\nimport {\n  Card,\n  CardActions,\n  CardHeader,\n  CardContent,\n  Divider,\n  Table,\n  TableRow,\n  TableCell,\n  Typography,\n  Button,\n  colors,\n  TableBody\n} from '@material-ui/core';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\n\nimport axios from 'utils/axios';\nimport { GenericMoreButton } from 'components';\nimport CircularProgress from './components/CircularProgress';\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  content: {\n    padding: 0,\n    '&:last-child': {\n      paddingBottom: 0\n    }\n  },\n  inner: {\n    minWidth: 700\n  },\n  details: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  image: {\n    marginRight: theme.spacing(2),\n    flexShrink: 0,\n    height: 56,\n    width: 56\n  },\n  subscriptions: {\n    fontWeight: theme.typography.fontWeightMedium\n  },\n  price: {\n    whiteSpace: 'nowrap'\n  },\n  value: {\n    color: colors.green[600],\n    fontWeight: theme.typography.fontWeightMedium\n  },\n  conversion: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end'\n  },\n  conversionStats: {\n    whiteSpace: 'nowrap',\n    marginRight: theme.spacing(2)\n  },\n  actions: {\n    justifyContent: 'flex-end'\n  },\n  arrowForwardIcon: {\n    marginLeft: theme.spacing(1)\n  }\n}));\n\nconst MostProfitableProducts = props => {\n  const { className, ...rest } = props;\n\n  const classes = useStyles();\n  const [products, setProducts] = useState([]);\n\n  useEffect(() => {\n    let mounted = true;\n\n    const fetchProducts = () => {\n      axios.get('/api/dashboard/profitable-products').then(response => {\n        if (mounted) {\n          setProducts(response.data.products);\n        }\n      });\n    };\n\n    fetchProducts();\n\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  return (\n    <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardHeader\n        action={<GenericMoreButton />}\n        title=\"Most Profitable Products\"\n      />\n      <Divider />\n      <CardContent className={classes.content}>\n        <PerfectScrollbar>\n          <div className={classes.inner}>\n            <Table>\n              <TableBody>\n                {products.map(product => (\n                  <TableRow\n                    hover\n                    key={product.id}\n                  >\n                    <TableCell>\n                      <div className={classes.details}>\n                        <img\n                          alt=\"Product\"\n                          className={classes.image}\n                          src={product.image}\n                        />\n                        <div>\n                          <Typography variant=\"h6\">{product.name}</Typography>\n                          <Typography variant=\"subtitle2\">\n                            <span className={classes.subscriptions}>\n                              {product.subscriptions}\n                            </span>{' '}\n                            Active\n                          </Typography>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Typography variant=\"h6\">Price</Typography>\n                      <Typography\n                        className={classes.price}\n                        variant=\"subtitle2\"\n                      >\n                        <span className={classes.value}>\n                          {product.currency}\n                          {product.price}\n                        </span>{' '}\n                        monthly\n                      </Typography>\n                    </TableCell>\n                    <TableCell>\n                      <div className={classes.conversion}>\n                        <div className={classes.conversionStats}>\n                          <Typography\n                            align=\"right\"\n                            variant=\"h6\"\n                          >\n                            {product.progress}%\n                          </Typography>\n                          <Typography variant=\"subtitle2\">\n                            Conversion Rate\n                          </Typography>\n                        </div>\n                        <CircularProgress value={product.progress} />\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        </PerfectScrollbar>\n      </CardContent>\n      <Divider />\n      <CardActions className={classes.actions}>\n        <Button\n          color=\"primary\"\n          component={RouterLink}\n          size=\"small\"\n          to=\"#\"\n          variant=\"text\"\n        >\n          See all\n          <ArrowForwardIcon className={classes.arrowForwardIcon} />\n        </Button>\n      </CardActions>\n    </Card>\n  );\n};\n\nMostProfitableProducts.propTypes = {\n  className: PropTypes.string\n};\n\nexport default MostProfitableProducts;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport { Card, Typography, Grid } from '@material-ui/core';\nimport formatter from 'utils/formatter';\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  content: {\n    padding: 0\n  },\n  item: {\n    padding: theme.spacing(3),\n    textAlign: 'center',\n    [theme.breakpoints.up('md')]: {\n      '&:not(:last-of-type)': {\n        borderRight: `1px solid ${theme.palette.divider}`\n      }\n    },\n    [theme.breakpoints.down('sm')]: {\n      '&:not(:last-of-type)': {\n        borderBottom: `1px solid ${theme.palette.divider}`\n      }\n    }\n  },\n  valueContainer: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  label: {\n    marginLeft: theme.spacing(1)\n  }\n}));\n\nconst Overview = props => {\n  const { className, report = [], ...rest } = props;\n\n  const classes = useStyles();\n\n  let totalIncome = 0;\n  let totalOutgo = 0;\n\n  if (report) {\n    report.forEach(e => {\n      if (e.type === 'income') totalIncome += e.sum;\n      if (e.type === 'outgo') totalOutgo += e.sum;\n    });\n  }\n\n  return (\n    <Card {...rest} className={clsx(classes.root, className)}>\n      <Grid alignItems=\"center\" container justify=\"space-between\">\n        <Grid className={classes.item} item sm={6} xs={12}>\n          <Typography component=\"h2\" gutterBottom variant=\"overline\">\n            Tổng doanh thu\n          </Typography>\n          <div className={classes.valueContainer}>\n            <Typography variant=\"h3\">\n              {formatter.format(totalIncome)}\n            </Typography>\n          </div>\n        </Grid>\n        <Grid className={classes.item} item sm={6} xs={12}>\n          <Typography component=\"h2\" gutterBottom variant=\"overline\">\n            Tổng chi phí\n          </Typography>\n          <div className={classes.valueContainer}>\n            <Typography variant=\"h3\">{formatter.format(totalOutgo)}</Typography>\n          </div>\n        </Grid>\n      </Grid>\n    </Card>\n  );\n};\n\nOverview.propTypes = {\n  className: PropTypes.string.isRequired,\n  report: PropTypes.array.isRequired\n};\n\nexport default Overview;\n","import React, { useState, useEffect } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/styles';\nimport {\n  Avatar,\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  Divider,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Typography\n} from '@material-ui/core';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\n\nimport axios from 'utils/axios';\nimport { GenericMoreButton } from 'components';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  content: {\n    flexGrow: 1,\n    padding: 0\n  },\n  avatar: {\n    fontSize: 14,\n    fontWeight: theme.typography.fontWeightBold,\n    color: theme.palette.white\n  },\n  actions: {\n    justifyContent: 'flex-end'\n  },\n  arrowForwardIcon: {\n    marginLeft: theme.spacing(1)\n  }\n}));\n\nconst TopReferrals = props => {\n  const { className, ...rest } = props;\n\n  const classes = useStyles();\n  const [referrals, setReferrals] = useState([]);\n\n  useEffect(() => {\n    let mounted = true;\n\n    const fetchReferrals = () => {\n      axios.get('/api/dashboard/top-referrals').then(response => {\n        if (mounted) {\n          setReferrals(response.data.referrals);\n        }\n      });\n    };\n\n    fetchReferrals();\n\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  return (\n    <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardHeader\n        action={<GenericMoreButton />}\n        title=\"Top Referrals\"\n      />\n      <Divider />\n      <CardContent className={classes.content}>\n        <List disablePadding>\n          {referrals.map((referral, i) => (\n            <ListItem\n              divider={i < referrals.length - 1}\n              key={referral.id}\n            >\n              <ListItemAvatar>\n                <Avatar\n                  className={classes.avatar}\n                  size=\"small\"\n                  style={{ backgroundColor: referral.color }}\n                >\n                  {referral.initials}\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText primary={referral.name} />\n              <Typography variant=\"subtitle2\">{referral.value}</Typography>\n            </ListItem>\n          ))}\n        </List>\n      </CardContent>\n      <Divider />\n      <CardActions className={classes.actions}>\n        <Button\n          color=\"primary\"\n          component={RouterLink}\n          size=\"small\"\n          to=\"#\"\n          variant=\"text\"\n        >\n          See all\n          <ArrowForwardIcon className={classes.arrowForwardIcon} />\n        </Button>\n      </CardActions>\n    </Card>\n  );\n};\n\nTopReferrals.propTypes = {\n  className: PropTypes.string\n};\n\nexport default TopReferrals;\n","import React, { useState, useEffect } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/styles';\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  Divider,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Avatar,\n  Typography,\n  Link\n} from '@material-ui/core';\n\nimport axios from 'utils/axios';\nimport getInitials from 'utils/getInitials';\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  statsContainer: {\n    display: 'flex'\n  },\n  statsItem: {\n    padding: theme.spacing(3),\n    flexGrow: 1,\n    '&:first-of-type': {\n      borderRight: `1px solid ${theme.palette.divider}`\n    }\n  },\n  content: {\n    padding: 0\n  },\n  date: {\n    whiteSpace: 'nowrap'\n  }\n}));\n\nconst CustomerActivity = props => {\n  const { className, ...rest } = props;\n\n  const classes = useStyles();\n  const [customers, setCustomers] = useState([]);\n\n  useEffect(() => {\n    let mounted = true;\n\n    const fetchCustomers = () => {\n      axios.get('/api/dashboard/customer-activity').then(response => {\n        if (mounted) {\n          setCustomers(response.data.customers);\n        }\n      });\n    };\n\n    fetchCustomers();\n\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  return (\n    <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardHeader title=\"Customer Activity\" />\n      <Divider />\n      <div className={classes.statsContainer}>\n        <div className={classes.statsItem}>\n          <Typography\n            align=\"center\"\n            component=\"h4\"\n            gutterBottom\n            variant=\"overline\"\n          >\n            Registered\n          </Typography>\n          <Typography\n            align=\"center\"\n            variant=\"h3\"\n          >\n            15,245\n          </Typography>\n        </div>\n        <Divider />\n        <div className={classes.statsItem}>\n          <Typography\n            align=\"center\"\n            component=\"h4\"\n            gutterBottom\n            variant=\"overline\"\n          >\n            Online\n          </Typography>\n          <Typography\n            align=\"center\"\n            variant=\"h3\"\n          >\n            357\n          </Typography>\n        </div>\n      </div>\n      <Divider />\n      <CardContent className={classes.content}>\n        <List disablePadding>\n          {customers.map((customer, i) => (\n            <ListItem\n              divider={i < customers.length - 1}\n              key={customer.id}\n            >\n              <ListItemAvatar>\n                <Avatar\n                  alt=\"Customer\"\n                  component={RouterLink}\n                  src={customer.author.avatar}\n                  to=\"/management/customers/1\"\n                >\n                  {getInitials(customer.author.name)}\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText\n                disableTypography\n                primary={\n                  <Typography\n                    component={RouterLink}\n                    to=\"/management/customers/1\"\n                    variant=\"h6\"\n                  >\n                    {customer.author.name}\n                  </Typography>\n                }\n                secondary={\n                  <Typography variant=\"body2\">\n                    {customer.description} |{' '}\n                    {customer.type === 'payment' && (\n                      <Link\n                        color=\"inherit\"\n                        component={RouterLink}\n                        to=\"#\"\n                      >\n                        See invoice\n                      </Link>\n                    )}\n                  </Typography>\n                }\n              />\n              <Typography\n                className={classes.date}\n                variant=\"body2\"\n              >\n                {moment(customer.created_at).fromNow()}\n              </Typography>\n            </ListItem>\n          ))}\n        </List>\n      </CardContent>\n    </Card>\n  );\n};\n\nCustomerActivity.propTypes = {\n  className: PropTypes.string\n};\n\nexport default CustomerActivity;\n","import React, { useState, useEffect } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport clsx from 'clsx';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/styles';\nimport {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  Divider,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  TableSortLabel,\n  Tooltip,\n  colors\n} from '@material-ui/core';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\n\nimport axios from 'utils/axios';\nimport { Label, GenericMoreButton } from 'components';\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  content: {\n    padding: 0\n  },\n  inner: {\n    minWidth: 700\n  },\n  progressContainer: {\n    padding: theme.spacing(3),\n    display: 'flex',\n    justifyContent: 'center'\n  },\n  actions: {\n    justifyContent: 'flex-end'\n  },\n  arrowForwardIcon: {\n    marginLeft: theme.spacing(1)\n  }\n}));\n\nconst labelColors = {\n  complete: colors.green[600],\n  pending: colors.orange[600],\n  rejected: colors.red[600]\n};\n\nconst LatestOrders = props => {\n  const { className, ...rest } = props;\n\n  const classes = useStyles();\n  const [orders, setOrders] = useState(null);\n\n  useEffect(() => {\n    let mounted = true;\n\n    const fetchOrders = () => {\n      axios.get('/api/dashboard/latest-orders').then(response => {\n        if (mounted) {\n          setOrders(response.data.orders);\n        }\n      });\n    };\n\n    fetchOrders();\n\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  return (\n    <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardHeader\n        action={<GenericMoreButton />}\n        title=\"Latest Orders\"\n      />\n      <Divider />\n      <CardContent className={classes.content}>\n        <PerfectScrollbar options={{ suppressScrollY: true }}>\n          <div className={classes.inner}>\n            {orders && (\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell sortDirection=\"desc\">\n                      <Tooltip\n                        enterDelay={300}\n                        title=\"Sort\"\n                      >\n                        <TableSortLabel\n                          active\n                          direction=\"desc\"\n                        >\n                          Date\n                        </TableSortLabel>\n                      </Tooltip>\n                    </TableCell>\n                    <TableCell>Customer</TableCell>\n                    <TableCell>Items</TableCell>\n                    <TableCell>Total</TableCell>\n                    <TableCell>Status</TableCell>\n                    <TableCell align=\"right\">Actions</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {orders.map(order => (\n                    <TableRow\n                      hover\n                      key={order.id}\n                    >\n                      <TableCell>{order.ref}</TableCell>\n                      <TableCell>{order.customer.name}</TableCell>\n                      <TableCell>{order.items}</TableCell>\n                      <TableCell className={classes.totalCell}>\n                        {order.currency} {order.value}\n                      </TableCell>\n                      <TableCell>\n                        <Label\n                          color={labelColors[order.status]}\n                          variant=\"outlined\"\n                        >\n                          {order.status}\n                        </Label>\n                      </TableCell>\n                      <TableCell align=\"right\">\n                        <Button\n                          color=\"primary\"\n                          component={RouterLink}\n                          size=\"small\"\n                          to={'management/orders/1'}\n                          variant=\"outlined\"\n                        >\n                          View\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            )}\n          </div>\n        </PerfectScrollbar>\n      </CardContent>\n      <CardActions className={classes.actions}>\n        <Button\n          color=\"primary\"\n          component={RouterLink}\n          size=\"small\"\n          to=\"management/orders\"\n          variant=\"text\"\n        >\n          See all\n          <ArrowForwardIcon className={classes.arrowForwardIcon} />\n        </Button>\n      </CardActions>\n    </Card>\n  );\n};\n\nLatestOrders.propTypes = {\n  className: PropTypes.string\n};\n\nexport default LatestOrders;\n","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport { Button, Card, Grid, TextField } from '@material-ui/core';\n\nimport { Page } from 'components';\nimport {\n  Header,\n  Overview,\n  FinancialStats,\n  FinancialStatsQuarter\n} from './components';\nimport TransactionService from 'services/transaction.service';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: theme.spacing(3)\n  },\n  container: {\n    '& > *': {\n      height: '100%'\n    }\n  },\n  card: {\n    padding: '1rem'\n  }\n}));\n\nconst AdminFinancialReport = () => {\n  const classes = useStyles();\n\n  const [report, setReport] = useState(null);\n  const [year, setYear] = useState(new Date().getFullYear());\n\n  const fetchData = () => {\n    TransactionService._getReport(year).then(res => setReport(res.data.report));\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (\n    <Page className={classes.root} title=\"Báo cáo thu chi\">\n      <Header />\n      <Grid className={classes.container} container spacing={3}>\n        <Grid item xs={4}>\n          <Card className={classes.card}>\n            <TextField\n              label=\"Năm\"\n              onChange={e => setYear(e.target.value)}\n              size=\"small\"\n              type=\"number\"\n              value={year}\n              variant=\"outlined\"\n            />\n            <Button\n              color=\"primary\"\n              onClick={fetchData}\n              style={{ marginLeft: '0.5rem' }}\n              variant=\"contained\">\n              Lấy thông tin\n            </Button>\n          </Card>\n        </Grid>\n        <Grid item xs={12}>\n          <Overview report={report} />\n        </Grid>\n        <Grid item xs={12}>\n          <FinancialStats report={report} />\n        </Grid>\n        <Grid item xs={12}>\n          <FinancialStatsQuarter report={report} />\n        </Grid>\n      </Grid>\n    </Page>\n  );\n};\n\nexport default AdminFinancialReport;\n"],"sourceRoot":""}